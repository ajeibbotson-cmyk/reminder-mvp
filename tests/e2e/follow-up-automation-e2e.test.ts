/**\n * End-to-End Follow-up Automation User Journey Tests\n * Complete user workflows for UAE business automation\n */\n\nimport { test, expect, Page, BrowserContext } from '@playwright/test'\nimport { faker } from '@faker-js/faker'\n\n// Test data interfaces\ninterface TestCompany {\n  name: string\n  email: string\n  trn: string\n  address: string\n  phone: string\n}\n\ninterface TestCustomer {\n  name: string\n  email: string\n  phone: string\n  address: string\n  trn?: string\n}\n\ninterface TestInvoice {\n  number: string\n  amount: string\n  currency: string\n  dueDate: string\n  description: string\n}\n\n// UAE-specific test data generators\nclass UAETestDataGenerator {\n  static generateCompany(): TestCompany {\n    return {\n      name: `${faker.company.name()} LLC`,\n      email: faker.internet.email(),\n      trn: `100${faker.string.numeric(9)}001`,\n      address: `${faker.location.streetAddress()}, Dubai, UAE`,\n      phone: '+971-4-' + faker.string.numeric(7)\n    }\n  }\n\n  static generateCustomer(): TestCustomer {\n    return {\n      name: faker.person.fullName(),\n      email: faker.internet.email(),\n      phone: '+971-50-' + faker.string.numeric(7),\n      address: `${faker.location.streetAddress()}, Abu Dhabi, UAE`,\n      trn: `100${faker.string.numeric(9)}001`\n    }\n  }\n\n  static generateInvoice(): TestInvoice {\n    const amount = faker.number.int({ min: 1000, max: 50000 })\n    return {\n      number: `INV-${faker.string.numeric(4)}-${faker.string.numeric(3)}`,\n      amount: amount.toString(),\n      currency: 'AED',\n      dueDate: faker.date.future().toISOString().split('T')[0],\n      description: `${faker.commerce.productName()} - Professional Services`\n    }\n  }\n}\n\n// Page Object Model for Follow-up Automation\nclass FollowUpAutomationPage {\n  constructor(private page: Page) {}\n\n  // Navigation\n  async navigateToFollowUps() {\n    await this.page.goto('/dashboard/follow-ups')\n    await this.page.waitForSelector('[data-testid=\"follow-ups-dashboard\"]', { timeout: 10000 })\n  }\n\n  async navigateToSequenceBuilder() {\n    await this.page.click('[data-testid=\"create-sequence-btn\"]')\n    await this.page.waitForSelector('[data-testid=\"sequence-builder\"]', { timeout: 5000 })\n  }\n\n  // Sequence Creation\n  async createSequence(name: string, description: string) {\n    await this.page.fill('[data-testid=\"sequence-name\"]', name)\n    await this.page.fill('[data-testid=\"sequence-description\"]', description)\n  }\n\n  async addSequenceStep(stepData: {\n    delay: string\n    subject: string\n    content: string\n    tone: string\n    language: string\n  }) {\n    await this.page.click('[data-testid=\"add-step-btn\"]')\n    \n    const stepIndex = await this.page.locator('[data-testid^=\"step-\"]').count() - 1\n    const stepSelector = `[data-testid=\"step-${stepIndex}\"]`\n    \n    await this.page.fill(`${stepSelector} [data-testid=\"step-delay\"]`, stepData.delay)\n    await this.page.fill(`${stepSelector} [data-testid=\"step-subject\"]`, stepData.subject)\n    await this.page.fill(`${stepSelector} [data-testid=\"step-content\"]`, stepData.content)\n    await this.page.selectOption(`${stepSelector} [data-testid=\"step-tone\"]`, stepData.tone)\n    await this.page.selectOption(`${stepSelector} [data-testid=\"step-language\"]`, stepData.language)\n  }\n\n  async saveSequence() {\n    await this.page.click('[data-testid=\"save-sequence-btn\"]')\n    await this.page.waitForSelector('[data-testid=\"sequence-saved-success\"]', { timeout: 5000 })\n  }\n\n  // Invoice Management\n  async navigateToInvoices() {\n    await this.page.goto('/dashboard/invoices')\n    await this.page.waitForSelector('[data-testid=\"invoices-list\"]', { timeout: 10000 })\n  }\n\n  async createInvoice(customer: TestCustomer, invoice: TestInvoice) {\n    await this.page.click('[data-testid=\"create-invoice-btn\"]')\n    await this.page.waitForSelector('[data-testid=\"invoice-form\"]')\n\n    // Fill customer information\n    await this.page.fill('[data-testid=\"customer-name\"]', customer.name)\n    await this.page.fill('[data-testid=\"customer-email\"]', customer.email)\n    await this.page.fill('[data-testid=\"customer-phone\"]', customer.phone)\n    await this.page.fill('[data-testid=\"customer-address\"]', customer.address)\n\n    // Fill invoice details\n    await this.page.fill('[data-testid=\"invoice-number\"]', invoice.number)\n    await this.page.fill('[data-testid=\"invoice-amount\"]', invoice.amount)\n    await this.page.selectOption('[data-testid=\"invoice-currency\"]', invoice.currency)\n    await this.page.fill('[data-testid=\"invoice-due-date\"]', invoice.dueDate)\n    await this.page.fill('[data-testid=\"invoice-description\"]', invoice.description)\n\n    await this.page.click('[data-testid=\"save-invoice-btn\"]')\n    await this.page.waitForSelector('[data-testid=\"invoice-created-success\"]', { timeout: 5000 })\n  }\n\n  async assignSequenceToInvoice(invoiceNumber: string, sequenceName: string) {\n    // Find invoice in list\n    await this.page.click(`[data-testid=\"invoice-${invoiceNumber}\"] [data-testid=\"assign-sequence-btn\"]`)\n    await this.page.waitForSelector('[data-testid=\"sequence-assignment-dialog\"]')\n    \n    // Select sequence\n    await this.page.selectOption('[data-testid=\"sequence-select\"]', sequenceName)\n    await this.page.click('[data-testid=\"assign-sequence-confirm\"]')\n    await this.page.waitForSelector('[data-testid=\"sequence-assigned-success\"]', { timeout: 5000 })\n  }\n\n  // Monitoring and Analytics\n  async viewSequenceAnalytics(sequenceName: string) {\n    await this.navigateToFollowUps()\n    await this.page.click(`[data-testid=\"sequence-${sequenceName}\"] [data-testid=\"view-analytics-btn\"]`)\n    await this.page.waitForSelector('[data-testid=\"sequence-analytics\"]', { timeout: 5000 })\n  }\n\n  async getAnalyticsData() {\n    const totalExecutions = await this.page.textContent('[data-testid=\"total-executions\"]')\n    const successRate = await this.page.textContent('[data-testid=\"success-rate\"]')\n    const openRate = await this.page.textContent('[data-testid=\"open-rate\"]')\n    const conversionRate = await this.page.textContent('[data-testid=\"conversion-rate\"]')\n\n    return {\n      totalExecutions: parseInt(totalExecutions || '0'),\n      successRate: parseFloat(successRate || '0'),\n      openRate: parseFloat(openRate || '0'),\n      conversionRate: parseFloat(conversionRate || '0')\n    }\n  }\n\n  // Cultural Compliance Validation\n  async validateCulturalCompliance() {\n    await this.page.click('[data-testid=\"cultural-compliance-check\"]')\n    await this.page.waitForSelector('[data-testid=\"compliance-results\"]', { timeout: 5000 })\n    \n    const complianceScore = await this.page.textContent('[data-testid=\"compliance-score\"]')\n    const issues = await this.page.locator('[data-testid=\"compliance-issues\"] li').allTextContents()\n    const suggestions = await this.page.locator('[data-testid=\"compliance-suggestions\"] li').allTextContents()\n\n    return {\n      score: parseInt(complianceScore || '0'),\n      issues,\n      suggestions\n    }\n  }\n\n  // Business Hours Testing\n  async testBusinessHoursScheduling() {\n    await this.page.click('[data-testid=\"test-scheduling-btn\"]')\n    await this.page.waitForSelector('[data-testid=\"scheduling-test-results\"]', { timeout: 10000 })\n    \n    const scheduledTime = await this.page.textContent('[data-testid=\"scheduled-time\"]')\n    const businessHoursCompliant = await this.page.isVisible('[data-testid=\"business-hours-compliant\"]')\n    const prayerTimeAvoidance = await this.page.isVisible('[data-testid=\"prayer-time-avoided\"]')\n    const holidayRespected = await this.page.isVisible('[data-testid=\"holiday-respected\"]')\n\n    return {\n      scheduledTime,\n      businessHoursCompliant,\n      prayerTimeAvoidance,\n      holidayRespected\n    }\n  }\n}\n\n// Authentication helper\nclass AuthHelper {\n  static async loginAsUAEBusiness(page: Page) {\n    await page.goto('/auth/signin')\n    await page.fill('[data-testid=\"email\"]', 'test@uaebusiness.ae')\n    await page.fill('[data-testid=\"password\"]', 'testpassword123')\n    await page.click('[data-testid=\"signin-btn\"]')\n    await page.waitForSelector('[data-testid=\"dashboard\"]', { timeout: 10000 })\n  }\n\n  static async logout(page: Page) {\n    await page.click('[data-testid=\"user-menu\"]')\n    await page.click('[data-testid=\"logout-btn\"]')\n    await page.waitForSelector('[data-testid=\"signin-form\"]', { timeout: 5000 })\n  }\n}\n\ntest.describe('Follow-up Automation E2E User Journeys', () => {\n  let followUpPage: FollowUpAutomationPage\n  let testCompany: TestCompany\n  let testCustomer: TestCustomer\n  let testInvoice: TestInvoice\n\n  test.beforeEach(async ({ page }) => {\n    followUpPage = new FollowUpAutomationPage(page)\n    testCompany = UAETestDataGenerator.generateCompany()\n    testCustomer = UAETestDataGenerator.generateCustomer()\n    testInvoice = UAETestDataGenerator.generateInvoice()\n\n    // Login as UAE business user\n    await AuthHelper.loginAsUAEBusiness(page)\n  })\n\n  test.afterEach(async ({ page }) => {\n    await AuthHelper.logout(page)\n  })\n\n  test.describe('Complete Automation Setup Journey', () => {\n    test('should create culturally compliant follow-up sequence', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      await followUpPage.navigateToSequenceBuilder()\n\n      // Create UAE-culturally appropriate sequence\n      await followUpPage.createSequence(\n        'UAE Professional Follow-up Sequence',\n        'Culturally sensitive follow-up sequence for UAE business clients'\n      )\n\n      // Step 1: Gentle reminder\n      await followUpPage.addSequenceStep({\n        delay: '7',\n        subject: 'Gentle Reminder: Invoice {{invoiceNumber}} - {{customerName}}',\n        content: 'As-salamu alaykum {{customerName}},\\n\\nWe hope this email finds you in good health. This is a respectful reminder regarding Invoice {{invoiceNumber}} for {{invoiceAmount}} {{currency}}.\\n\\nWe would appreciate your kind attention to this matter at your earliest convenience.\\n\\nBarakallahu feeki for your continued partnership.\\n\\nBest regards,\\n{{companyName}} Team',\n        tone: 'BUSINESS',\n        language: 'ENGLISH'\n      })\n\n      // Step 2: Follow-up notice\n      await followUpPage.addSequenceStep({\n        delay: '7',\n        subject: 'Follow-up: Invoice {{invoiceNumber}} - Your Cooperation Appreciated',\n        content: 'Dear Valued Customer {{customerName}},\\n\\nWe respectfully follow up on our previous communication regarding Invoice {{invoiceNumber}}.\\n\\nWe kindly request your cooperation in settling this matter or discussing any concerns you may have.\\n\\nPlease contact us at your earliest convenience.\\n\\nJazakAllahu khair for your attention.\\n\\nWith sincere regards,\\n{{companyName}} Finance Team',\n        tone: 'FORMAL',\n        language: 'ENGLISH'\n      })\n\n      // Step 3: Final respectful notice\n      await followUpPage.addSequenceStep({\n        delay: '5',\n        subject: 'Important: Invoice {{invoiceNumber}} - Discussion Required',\n        content: 'Dear Esteemed Customer {{customerName}},\\n\\nWe respectfully write regarding Invoice {{invoiceNumber}} which remains outstanding.\\n\\nWe would very much appreciate the opportunity to discuss this matter with you.\\n\\nPlease contact us within the next few business days so we can work together amicably.\\n\\nWe value our business relationship greatly.\\n\\nRespectfully yours,\\n{{companyName}} Management',\n        tone: 'VERY_FORMAL',\n        language: 'ENGLISH'\n      })\n\n      await followUpPage.saveSequence()\n\n      // Validate cultural compliance\n      const compliance = await followUpPage.validateCulturalCompliance()\n      expect(compliance.score).toBeGreaterThan(80) // High cultural compliance\n      expect(compliance.issues.length).toBeLessThan(3) // Minimal issues\n    })\n\n    test('should create and automate invoice with follow-up sequence', async ({ page }) => {\n      // First create the sequence\n      await followUpPage.navigateToFollowUps()\n      await followUpPage.navigateToSequenceBuilder()\n      await followUpPage.createSequence('Test Automation Sequence', 'E2E test sequence')\n      \n      await followUpPage.addSequenceStep({\n        delay: '1', // Short delay for testing\n        subject: 'Test Reminder: {{invoiceNumber}}',\n        content: 'Dear {{customerName}}, test reminder for {{invoiceAmount}} {{currency}}.',\n        tone: 'BUSINESS',\n        language: 'ENGLISH'\n      })\n      \n      await followUpPage.saveSequence()\n\n      // Create invoice\n      await followUpPage.navigateToInvoices()\n      await followUpPage.createInvoice(testCustomer, testInvoice)\n\n      // Assign sequence to invoice\n      await followUpPage.assignSequenceToInvoice(testInvoice.number, 'Test Automation Sequence')\n\n      // Verify assignment\n      const assignmentSuccess = await page.isVisible('[data-testid=\"sequence-assigned-success\"]')\n      expect(assignmentSuccess).toBe(true)\n\n      // Check automation status\n      await page.click(`[data-testid=\"invoice-${testInvoice.number}\"] [data-testid=\"view-automation-status\"]`)\n      await page.waitForSelector('[data-testid=\"automation-status\"]')\n      \n      const automationStatus = await page.textContent('[data-testid=\"automation-status\"]')\n      expect(automationStatus).toContain('ACTIVE')\n    })\n  })\n\n  test.describe('UAE Business Compliance Validation', () => {\n    test('should respect UAE business hours in scheduling', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      \n      // Test business hours compliance\n      const schedulingTest = await followUpPage.testBusinessHoursScheduling()\n      \n      expect(schedulingTest.businessHoursCompliant).toBe(true)\n      expect(schedulingTest.prayerTimeAvoidance).toBe(true)\n      \n      // Verify scheduled time is within UAE business hours (Sunday-Thursday, 8 AM-6 PM)\n      const scheduledDate = new Date(schedulingTest.scheduledTime || '')\n      const dayOfWeek = scheduledDate.getDay()\n      const hour = scheduledDate.getHours()\n      \n      expect([0, 1, 2, 3, 4]).toContain(dayOfWeek) // Sunday-Thursday\n      expect(hour).toBeGreaterThanOrEqual(8)\n      expect(hour).toBeLessThan(18)\n    })\n\n    test('should avoid Islamic holidays and Ramadan periods', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      \n      // Navigate to scheduling settings\n      await page.click('[data-testid=\"scheduling-settings-btn\"]')\n      await page.waitForSelector('[data-testid=\"scheduling-settings\"]')\n      \n      // Enable Islamic calendar compliance\n      await page.check('[data-testid=\"respect-islamic-calendar\"]')\n      await page.check('[data-testid=\"avoid-ramadan-iftar\"]')\n      await page.check('[data-testid=\"respect-islamic-holidays\"]')\n      \n      await page.click('[data-testid=\"save-settings-btn\"]')\n      await page.waitForSelector('[data-testid=\"settings-saved-success\"]')\n      \n      // Test scheduling during Islamic observances\n      const schedulingTest = await followUpPage.testBusinessHoursScheduling()\n      expect(schedulingTest.holidayRespected).toBe(true)\n    })\n\n    test('should validate Arabic RTL template support', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      await followUpPage.navigateToSequenceBuilder()\n      \n      await followUpPage.createSequence('Arabic Bilingual Sequence', 'Supports Arabic RTL')\n      \n      // Add Arabic language step\n      await followUpPage.addSequenceStep({\n        delay: '7',\n        subject: 'تذكير: فاتورة {{invoiceNumber}}',\n        content: 'عزيزي العميل {{customerName}},\\n\\nنتمنى أن تكون بخير. هذا تذكير لطيف بخصوص الفاتورة {{invoiceNumber}}.\\n\\nنقدر تعاونكم في هذا الأمر.\\n\\nمع خالص التقدير',\n        tone: 'BUSINESS',\n        language: 'ARABIC'\n      })\n      \n      await followUpPage.saveSequence()\n      \n      // Verify RTL support\n      const arabicContent = await page.locator('[data-testid=\"step-content\"][dir=\"rtl\"]')\n      expect(await arabicContent.count()).toBeGreaterThan(0)\n      \n      // Validate Arabic text detection\n      const hasArabicText = await page.isVisible('[data-testid=\"arabic-detected\"]')\n      expect(hasArabicText).toBe(true)\n    })\n  })\n\n  test.describe('Monitoring and Analytics Journey', () => {\n    test('should provide comprehensive sequence analytics', async ({ page }) => {\n      // Setup test sequence with some execution data\n      await followUpPage.navigateToFollowUps()\n      \n      // Assume we have some existing sequence data\n      await followUpPage.viewSequenceAnalytics('Test Analytics Sequence')\n      \n      const analytics = await followUpPage.getAnalyticsData()\n      \n      // Verify analytics are displayed\n      expect(analytics.totalExecutions).toBeGreaterThanOrEqual(0)\n      expect(analytics.successRate).toBeGreaterThanOrEqual(0)\n      expect(analytics.successRate).toBeLessThanOrEqual(100)\n      expect(analytics.openRate).toBeGreaterThanOrEqual(0)\n      expect(analytics.openRate).toBeLessThanOrEqual(100)\n      expect(analytics.conversionRate).toBeGreaterThanOrEqual(0)\n      expect(analytics.conversionRate).toBeLessThanOrEqual(100)\n      \n      // Check for detailed step analytics\n      const stepAnalytics = await page.locator('[data-testid=\"step-analytics\"]')\n      expect(await stepAnalytics.count()).toBeGreaterThan(0)\n    })\n\n    test('should show real-time execution monitoring', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      \n      // Navigate to execution monitor\n      await page.click('[data-testid=\"execution-monitor-btn\"]')\n      await page.waitForSelector('[data-testid=\"execution-monitor\"]')\n      \n      // Check for active executions\n      const activeExecutions = await page.locator('[data-testid=\"active-execution\"]')\n      const executionCount = await activeExecutions.count()\n      \n      // Should display execution status\n      if (executionCount > 0) {\n        const firstExecution = activeExecutions.first()\n        const status = await firstExecution.locator('[data-testid=\"execution-status\"]').textContent()\n        expect(['ACTIVE', 'PENDING', 'SCHEDULED', 'PAUSED']).toContain(status)\n        \n        const progress = await firstExecution.locator('[data-testid=\"execution-progress\"]').textContent()\n        expect(progress).toMatch(/\\d+\\/\\d+/) // Format like \"2/3\"\n      }\n    })\n\n    test('should handle sequence pause and resume operations', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      \n      // Find an active sequence\n      const activeSequence = page.locator('[data-testid^=\"sequence-\"][data-status=\"active\"]').first()\n      \n      if (await activeSequence.count() > 0) {\n        // Pause sequence\n        await activeSequence.locator('[data-testid=\"pause-sequence-btn\"]').click()\n        await page.waitForSelector('[data-testid=\"sequence-paused-success\"]')\n        \n        // Verify paused status\n        const pausedStatus = await activeSequence.locator('[data-testid=\"sequence-status\"]').textContent()\n        expect(pausedStatus).toBe('PAUSED')\n        \n        // Resume sequence\n        await activeSequence.locator('[data-testid=\"resume-sequence-btn\"]').click()\n        await page.waitForSelector('[data-testid=\"sequence-resumed-success\"]')\n        \n        // Verify active status\n        const resumedStatus = await activeSequence.locator('[data-testid=\"sequence-status\"]').textContent()\n        expect(resumedStatus).toBe('ACTIVE')\n      }\n    })\n  })\n\n  test.describe('Error Handling and Edge Cases', () => {\n    test('should handle network failures gracefully', async ({ page }) => {\n      // Simulate network failure\n      await page.route('**/api/sequences/**', route => route.abort())\n      \n      await followUpPage.navigateToFollowUps()\n      \n      // Attempt to create sequence\n      await followUpPage.navigateToSequenceBuilder()\n      await followUpPage.createSequence('Network Test Sequence', 'Testing network failure')\n      \n      try {\n        await followUpPage.saveSequence()\n      } catch (error) {\n        // Should show appropriate error message\n        const errorMessage = await page.isVisible('[data-testid=\"network-error-message\"]')\n        expect(errorMessage).toBe(true)\n      }\n      \n      // Restore network\n      await page.unroute('**/api/sequences/**')\n    })\n\n    test('should validate form inputs correctly', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      await followUpPage.navigateToSequenceBuilder()\n      \n      // Try to save without required fields\n      await page.click('[data-testid=\"save-sequence-btn\"]')\n      \n      // Should show validation errors\n      const nameError = await page.isVisible('[data-testid=\"sequence-name-error\"]')\n      const stepsError = await page.isVisible('[data-testid=\"sequence-steps-error\"]')\n      \n      expect(nameError).toBe(true)\n      expect(stepsError).toBe(true)\n      \n      // Should not navigate away\n      const stillOnBuilder = await page.isVisible('[data-testid=\"sequence-builder\"]')\n      expect(stillOnBuilder).toBe(true)\n    })\n\n    test('should handle large sequence configurations', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      await followUpPage.navigateToSequenceBuilder()\n      \n      await followUpPage.createSequence('Large Sequence Test', 'Testing large sequence handling')\n      \n      // Add maximum allowed steps (e.g., 10 steps)\n      for (let i = 1; i <= 10; i++) {\n        await followUpPage.addSequenceStep({\n          delay: '7',\n          subject: `Step ${i}: Invoice {{invoiceNumber}}`,\n          content: `This is step ${i} of our follow-up sequence. Please review your invoice.`,\n          tone: 'BUSINESS',\n          language: 'ENGLISH'\n        })\n      }\n      \n      // Should handle all steps without performance issues\n      const stepCount = await page.locator('[data-testid^=\"step-\"]').count()\n      expect(stepCount).toBe(10)\n      \n      // Should save successfully\n      await followUpPage.saveSequence()\n      const saved = await page.isVisible('[data-testid=\"sequence-saved-success\"]')\n      expect(saved).toBe(true)\n    })\n  })\n\n  test.describe('Mobile Responsiveness', () => {\n    test('should work correctly on mobile devices', async ({ page, isMobile }) => {\n      if (!isMobile) {\n        // Set mobile viewport\n        await page.setViewportSize({ width: 375, height: 667 })\n      }\n      \n      await followUpPage.navigateToFollowUps()\n      \n      // Check mobile navigation\n      const mobileMenu = await page.isVisible('[data-testid=\"mobile-menu-toggle\"]')\n      if (mobileMenu) {\n        await page.click('[data-testid=\"mobile-menu-toggle\"]')\n        await page.waitForSelector('[data-testid=\"mobile-nav-menu\"]')\n      }\n      \n      // Verify key elements are accessible on mobile\n      const sequenceList = await page.isVisible('[data-testid=\"sequences-list\"]')\n      expect(sequenceList).toBe(true)\n      \n      const createButton = await page.isVisible('[data-testid=\"create-sequence-btn\"]')\n      expect(createButton).toBe(true)\n    })\n  })\n\n  test.describe('Accessibility Compliance', () => {\n    test('should meet accessibility standards', async ({ page }) => {\n      await followUpPage.navigateToFollowUps()\n      \n      // Check for proper heading structure\n      const h1Count = await page.locator('h1').count()\n      expect(h1Count).toBe(1) // Should have exactly one H1\n      \n      // Check for alt text on images\n      const images = await page.locator('img').all()\n      for (const img of images) {\n        const alt = await img.getAttribute('alt')\n        expect(alt).toBeTruthy() // All images should have alt text\n      }\n      \n      // Check for proper form labels\n      const inputs = await page.locator('input, textarea, select').all()\n      for (const input of inputs) {\n        const id = await input.getAttribute('id')\n        if (id) {\n          const label = await page.locator(`label[for=\"${id}\"]`).count()\n          const ariaLabel = await input.getAttribute('aria-label')\n          const ariaLabelledBy = await input.getAttribute('aria-labelledby')\n          \n          // Should have either a label, aria-label, or aria-labelledby\n          expect(label > 0 || ariaLabel || ariaLabelledBy).toBeTruthy()\n        }\n      }\n      \n      // Check for keyboard navigation\n      await page.keyboard.press('Tab')\n      const focusedElement = await page.locator(':focus')\n      expect(await focusedElement.count()).toBe(1) // Should have a focused element\n    })\n  })\n})"