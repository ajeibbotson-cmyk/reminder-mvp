generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model activities {
  id          String    @id
  company_id  String
  user_id     String
  type        String
  description String
  metadata    Json?     @default("{}")
  created_at  DateTime  @default(now())
  companies   companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model companies {
  id                  String                @id
  name                String
  trn                 String?               @unique
  address             String?
  settings            Json?                 @default("{}")
  created_at          DateTime              @default(now())
  updated_at          DateTime
  activities          activities[]
  customers           customers[]
  follow_up_sequences follow_up_sequences[]
  invoices            invoices[]
  users               users[]
}

model customers {
  id            String     @id
  company_id    String
  name          String
  email         String
  phone         String?
  payment_terms Int?
  notes         String?
  created_at    DateTime   @default(now())
  updated_at    DateTime
  companies     companies  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  invoices      invoices[]

  @@unique([email, company_id])
}

model follow_up_logs {
  id                  String              @id
  invoice_id          String
  sequence_id         String
  step_number         Int
  email_address       String
  subject             String
  content             String
  sent_at             DateTime
  email_opened        DateTime?
  email_clicked       DateTime?
  response_received   DateTime?
  aws_message_id      String?
  delivery_status     String?
  invoices            invoices            @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  follow_up_sequences follow_up_sequences @relation(fields: [sequence_id], references: [id], onDelete: Cascade)
}

model follow_up_sequences {
  id             String           @id
  company_id     String
  name           String
  steps          Json
  active         Boolean          @default(true)
  created_at     DateTime         @default(now())
  updated_at     DateTime
  follow_up_logs follow_up_logs[]
  companies      companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
}

model invoice_items {
  id          String   @id
  invoice_id  String
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unit_price  Decimal  @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  invoices    invoices @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
}

model invoices {
  id             String           @id
  company_id     String
  number         String
  customer_name  String
  customer_email String
  amount         Decimal          @db.Decimal(10, 2)
  currency       String           @default("AED")
  due_date       DateTime
  status         InvoiceStatus    @default(SENT)
  description    String?
  notes          String?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  follow_up_logs follow_up_logs[]
  invoice_items  invoice_items[]
  companies      companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  customers      customers        @relation(fields: [customer_email, company_id], references: [email, company_id])
  payments       payments[]

  @@unique([company_id, number])
}

model payments {
  id           String        @id
  invoice_id   String
  amount       Decimal       @db.Decimal(10, 2)
  payment_date DateTime
  method       PaymentMethod @default(BANK_TRANSFER)
  reference    String?
  notes        String?
  created_at   DateTime      @default(now())
  invoices     invoices      @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id         String       @id
  email      String       @unique
  name       String
  password   String?
  company_id String
  role       UserRole     @default(FINANCE)
  created_at DateTime     @default(now())
  updated_at DateTime
  accounts   accounts[]
  activities activities[]
  sessions   sessions[]
  companies  companies    @relation(fields: [company_id], references: [id], onDelete: Cascade)
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum InvoiceStatus {
  DRAFT
  SENT
  OVERDUE
  PAID
  DISPUTED
  WRITTEN_OFF
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CASH
  CHEQUE
  OTHER
}

enum UserRole {
  ADMIN
  FINANCE
  VIEWER
}
